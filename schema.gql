directive @field(at: _DirectiveArgument_, default: _DirectiveArgument_) on FIELD_DEFINITION

directive @discriminates(with: _DirectiveArgument_, opaqueType: String) on INTERFACE

directive @discriminationAlias(value: String!, type: String!) repeatable on INTERFACE

directive @implements(interface: String!) on OBJECT | INTERFACE

directive @resolve(at: _DirectiveArgument_, nodeType: String, from: String) on FIELD_DEFINITION

directive @relation(name: String, nodeType: String, kind: String) on FIELD_DEFINITION

scalar _DirectiveArgument_

interface Node {
  id: ID!
}

interface Connection {
  pageInfo: PageInfo!
  edges: [Edge!]!
  count: Int
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface Edge {
  cursor: String!
  node: Node!
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  entity(kind: String!, name: String!, namespace: String): Entity
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type KeyValuePair {
  key: String!
  value: String!
}

interface Ownable implements Node {
  id: ID!
}

interface Dependency implements Node {
  id: ID!
}

union Owner = User | Team | SubDepartment | Department | Organization | OpaqueGroup

interface Entity implements Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
}

type EntityLink {
  url: String!
  title: String
  icon: String
  type: String
}

interface Location implements Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String
  target: String
  targets: [String!]
  presence: String
}

interface API implements Entity & Node & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  definition: String!
  system: System
  apiConsumedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
  apiProvidedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type ComponentConnection implements Connection {
  pageInfo: PageInfo!
  edges: [ComponentEdge!]!
  count: Int
}

type ComponentEdge implements Edge {
  cursor: String!
  node: Component!
}

interface Component implements Entity & Node & Dependency & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  system: System
  subComponentOf: Component
  providesApis(first: Int, after: String, last: Int, before: String): APIConnection
  consumesApis(first: Int, after: String, last: Int, before: String): APIConnection
  dependsOn(first: Int, after: String, last: Int, before: String): DependencyConnection
  dependencyOf(first: Int, after: String, last: Int, before: String): DependencyConnection
  components(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type APIConnection implements Connection {
  pageInfo: PageInfo!
  edges: [APIEdge!]!
  count: Int
}

type APIEdge implements Edge {
  cursor: String!
  node: API!
}

type DependencyConnection implements Connection {
  pageInfo: PageInfo!
  edges: [DependencyEdge!]!
  count: Int
}

type DependencyEdge implements Edge {
  cursor: String!
  node: Dependency!
}

type Domain implements Entity & Node & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  owner: Owner!
  systems(first: Int, after: String, last: Int, before: String): SystemConnection
}

type SystemConnection implements Connection {
  pageInfo: PageInfo!
  edges: [SystemEdge!]!
  count: Int
}

type SystemEdge implements Edge {
  cursor: String!
  node: System!
}

interface Resource implements Entity & Node & Dependency & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  owner: Owner!
  dependsOn(first: Int, after: String, last: Int, before: String): DependencyConnection
  dependencyOf(first: Int, after: String, last: Int, before: String): DependencyConnection
  system: System
}

type System implements Entity & Node & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  owner: Owner!
  domain: Domain
  apis(first: Int, after: String, last: Int, before: String): APIConnection
  components(first: Int, after: String, last: Int, before: String): ComponentConnection
  resources(first: Int, after: String, last: Int, before: String): ResourceConnection
}

type ResourceConnection implements Connection {
  pageInfo: PageInfo!
  edges: [ResourceEdge!]!
  count: Int
}

type ResourceEdge implements Edge {
  cursor: String!
  node: Resource!
}

type Step {
  id: String
  name: String
  action: String!
  input: JSONObject
  if: JSON
}

interface Template implements Entity & Node & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  parameters: JSONObject
  steps: [Step!]!
  owner: Owner
}

type GroupProfile {
  displayName: String
  email: String
  picture: String
}

interface Group implements Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  profile: GroupProfile
  parent: Group
  children(first: Int, after: String, last: Int, before: String): GroupConnection
  members(first: Int, after: String, last: Int, before: String): UserConnection
  ownerOf(first: Int, after: String, last: Int, before: String): OwnableConnection
}

type GroupConnection implements Connection {
  pageInfo: PageInfo!
  edges: [GroupEdge!]!
  count: Int
}

type GroupEdge implements Edge {
  cursor: String!
  node: Group!
}

type UserConnection implements Connection {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
  count: Int
}

type UserEdge implements Edge {
  cursor: String!
  node: User!
}

type OwnableConnection implements Connection {
  pageInfo: PageInfo!
  edges: [OwnableEdge!]!
  count: Int
}

type OwnableEdge implements Edge {
  cursor: String!
  node: Ownable!
}

type UserProfile {
  displayName: String
  email: String
  picture: String
}

type User implements Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  profile: UserProfile
  memberOf(first: Int, after: String, last: Int, before: String): GroupConnection
  ownerOf(first: Int, after: String, last: Int, before: String): OwnableConnection
}

type OpaqueEntity implements Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
}

type URLLocation implements Location & Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String
  target: String
  targets: [String!]
  presence: String
}

type FileLocation implements Location & Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String
  target: String
  targets: [String!]
  presence: String
}

type OpaqueLocation implements Location & Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String
  target: String
  targets: [String!]
  presence: String
}

type OpenAPI implements API & Entity & Node & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  definition: String!
  system: System
  apiConsumedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
  apiProvidedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type AsyncAPI implements API & Entity & Node & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  definition: String!
  system: System
  apiConsumedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
  apiProvidedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type GraphQL implements API & Entity & Node & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  definition: String!
  system: System
  apiConsumedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
  apiProvidedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type GRPC implements API & Entity & Node & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  definition: String!
  system: System
  apiConsumedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
  apiProvidedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type OpaqueAPI implements API & Entity & Node & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  definition: String!
  system: System
  apiConsumedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
  apiProvidedBy(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type Service implements Component & Entity & Node & Dependency & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  system: System
  subComponentOf: Component
  providesApis(first: Int, after: String, last: Int, before: String): APIConnection
  consumesApis(first: Int, after: String, last: Int, before: String): APIConnection
  dependsOn(first: Int, after: String, last: Int, before: String): DependencyConnection
  dependencyOf(first: Int, after: String, last: Int, before: String): DependencyConnection
  components(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type Website implements Component & Entity & Node & Dependency & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  system: System
  subComponentOf: Component
  providesApis(first: Int, after: String, last: Int, before: String): APIConnection
  consumesApis(first: Int, after: String, last: Int, before: String): APIConnection
  dependsOn(first: Int, after: String, last: Int, before: String): DependencyConnection
  dependencyOf(first: Int, after: String, last: Int, before: String): DependencyConnection
  components(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type Library implements Component & Entity & Node & Dependency & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  system: System
  subComponentOf: Component
  providesApis(first: Int, after: String, last: Int, before: String): APIConnection
  consumesApis(first: Int, after: String, last: Int, before: String): APIConnection
  dependsOn(first: Int, after: String, last: Int, before: String): DependencyConnection
  dependencyOf(first: Int, after: String, last: Int, before: String): DependencyConnection
  components(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type OpaqueComponent implements Component & Entity & Node & Dependency & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  lifecycle: String!
  owner: Owner!
  system: System
  subComponentOf: Component
  providesApis(first: Int, after: String, last: Int, before: String): APIConnection
  consumesApis(first: Int, after: String, last: Int, before: String): APIConnection
  dependsOn(first: Int, after: String, last: Int, before: String): DependencyConnection
  dependencyOf(first: Int, after: String, last: Int, before: String): DependencyConnection
  components(first: Int, after: String, last: Int, before: String): ComponentConnection
}

type Database implements Resource & Entity & Node & Dependency & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  owner: Owner!
  dependsOn(first: Int, after: String, last: Int, before: String): DependencyConnection
  dependencyOf(first: Int, after: String, last: Int, before: String): DependencyConnection
  system: System
}

type OpaqueResource implements Resource & Entity & Node & Dependency & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  owner: Owner!
  dependsOn(first: Int, after: String, last: Int, before: String): DependencyConnection
  dependencyOf(first: Int, after: String, last: Int, before: String): DependencyConnection
  system: System
}

type OpaqueTemplate implements Template & Entity & Node & Ownable {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  parameters: JSONObject
  steps: [Step!]!
  owner: Owner
}

type Team implements Group & Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  profile: GroupProfile
  parent: Group
  children(first: Int, after: String, last: Int, before: String): GroupConnection
  members(first: Int, after: String, last: Int, before: String): UserConnection
  ownerOf(first: Int, after: String, last: Int, before: String): OwnableConnection
}

type SubDepartment implements Group & Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  profile: GroupProfile
  parent: Group
  children(first: Int, after: String, last: Int, before: String): GroupConnection
  members(first: Int, after: String, last: Int, before: String): UserConnection
  ownerOf(first: Int, after: String, last: Int, before: String): OwnableConnection
}

type Department implements Group & Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  profile: GroupProfile
  parent: Group
  children(first: Int, after: String, last: Int, before: String): GroupConnection
  members(first: Int, after: String, last: Int, before: String): UserConnection
  ownerOf(first: Int, after: String, last: Int, before: String): OwnableConnection
}

type Organization implements Group & Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  profile: GroupProfile
  parent: Group
  children(first: Int, after: String, last: Int, before: String): GroupConnection
  members(first: Int, after: String, last: Int, before: String): UserConnection
  ownerOf(first: Int, after: String, last: Int, before: String): OwnableConnection
}

type OpaqueGroup implements Group & Entity & Node {
  id: ID!
  name: String!
  kind: String!
  namespace: String!
  apiVersion: String!
  title: String
  description: String
  labels: [KeyValuePair!]
  annotations: [KeyValuePair!]
  tags: [String!]
  links: [EntityLink!]
  type: String!
  profile: GroupProfile
  parent: Group
  children(first: Int, after: String, last: Int, before: String): GroupConnection
  members(first: Int, after: String, last: Int, before: String): UserConnection
  ownerOf(first: Int, after: String, last: Int, before: String): OwnableConnection
}